"use strict";class Blogs{getBlogs=async()=>{try{const s=await fetch("/data/blog-data/blogs.json");return await s.json()}catch(s){console.error(s)}};displayBlogs=s=>{const t=document.querySelector(".blog__content");s.forEach((s=>{t&&t.insertAdjacentHTML("beforeend",`\n                    <article class="blog__card">\n                        <div class="blog__image">\n                            <img src="${s.image}" alt="" class="blog__img">\n                            <a href="#" class="blog__button">\n                                <img src="${s.btnIcon}" alt="arrow icon" width="20px" height="20px">\n                            </a>\n                        </div>\n                        <div class="blog__data">\n                            <h4 class="blog__title">${s.title}</h4>\n                            <p class="blog__description">${s.description}</p>\n                            <div class="blog__footer">\n                                <div class="blog__reaction">\n                                    <img src="${s.commentIcon}" alt="coment icon" width="30px" height="30px">\n                                    <span>${s.commentNum}</span>\n                                </div>\n                                <div class="blog__reaction">\n                                    <img src="${s.showIcon}" alt="reaction icon" width="30px" height="30px">\n                                    <span>${s.showNum}K</span>\n                                </div>\n                            </div>\n                        </div>\n                    </article>\n                `)}))}}(async()=>{const s=new Blogs,t=await s.getBlogs();s.displayBlogs(t)})();const domElements=()=>{const s=document.querySelector(".nav__list"),t=document.querySelector(".nav__menu"),e=document.getElementById("menu-btn"),n=document.getElementById("nav-close");return{navList:s,navMenu:t,closeNavMenu:()=>{t&&t.classList.remove("show-menu")},menuBtn:e,navClose:n}};let{navList:navList,navMenu:navMenu,closeNavMenu:closeNavMenu,menuBtn:menuBtn,navClose:navClose}=domElements();class NavLinks{getLinks=async()=>{try{const s=await fetch("/data/nav-data/navlinks.json");return await s.json()}catch(s){console.error(s)}};displayNavLinks=s=>{s.forEach((s=>{navList&&navList.insertAdjacentHTML("beforeend",`\n                <li class="nav__item">\n                    <a href="${s.link}" class="nav__link active-link" onclick="closeNavMenu()">${s.text}</a>\n                </li>`)}))};openMobMenu=()=>{menuBtn&&menuBtn.addEventListener("click",(()=>navMenu.classList.add("show-menu"))),navClose&&navClose.addEventListener("click",(()=>navMenu.classList.remove("show-menu")))}}(async()=>{const s=new NavLinks,t=await s.getLinks();s.displayNavLinks(t),s.openMobMenu()})();class Products{displayProducts=async()=>{const s=["/data/products-data/amped.json","/data/products-data/mochas.json","/data/products-data/lattes.json"].map((async s=>{const t=await fetch(s);return await t.json()})),t=await Promise.all(s);let e,n,a;e=t[0],n=t[1],a=t[2],this.ampedController(e),this.mochaController(n),this.latteController(a),this.productTabsController()};latteController(s){const t=document.querySelector("#lattes .products__wrapper");s.forEach((s=>{t&&t.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${s.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${s.price}</span>\n                            <span class="products__name">${s.name}</span>\n                            <button class="button products__button">\n                                <img src="${s.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}mochaController(s){const t=document.querySelector("#mochas .products__wrapper");s.forEach((s=>{t&&t.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${s.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${s.price}</span>\n                            <span class="products__name">${s.name}</span>\n                            <button class="button products__button">\n                                <img src="${s.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}ampedController(s){const t=document.querySelector("#amped .products__wrapper");s.forEach((s=>{t&&t.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${s.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${s.price}</span>\n                            <span class="products__name">${s.name}</span>\n                            <button class="button products__button">\n                                <img src="${s.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}productTabsController=()=>{const s=document.querySelectorAll(".products__item");function t(t){const e=t.currentTarget,n=e.dataset.product;document.querySelectorAll(".products__content").forEach((s=>{s.classList.remove("active-content")})),s.forEach((s=>{s.classList.remove("active-link")})),document.querySelector(`#${n}`).classList.add("active-content"),e.classList.add("active-link")}s.forEach((s=>{s.addEventListener("click",t)}))}}(async()=>{(new Products).displayProducts()})();class Testimonials{getSlides=async()=>{try{const s=await fetch("/data/slider-data/slider-data.json");return await s.json()}catch(s){console.error(s)}};displaySlides=s=>{document.querySelectorAll(".slide__container").forEach(((t,e)=>{s.forEach(((s,n)=>{e===n&&(t.innerHTML=`\n                    <div class="slide">\n                        <img src="${s.quoteIcon}" alt="" class="slide__quote" width="30px" height="30px">\n                        <div class="user">\n                            <img src="${s.image}" alt="" class="user__img">\n                            <div class="user__info">\n                                <h3>${s.name}</h3>\n                                <div class="user__stars">\n                                    <img src="${s.starIcon}" alt="" class="star" width="20px" height="20px">\n                                    <img src="${s.starIcon}" alt="" class="star" width="20px" height="20px">\n                                    <img src="${s.starIcon}" alt="" class="star" width="20px" height="20px">\n                                    <img src="${s.starIcon}" alt="" class="star" width="20px" height="20px">\n                                    <img src="${s.starIcon}" alt="" class="star" width="20px" height="20px">\n                                </div>\n                            </div>\n                        </div>\n                        <p class="user__description">${s.description}</p>\n                    </div> `)}))}))}}(async()=>{const s=new Testimonials,t=await s.getSlides();s.displaySlides(t)})();class Specialities{getGroups=async()=>{try{const s=await fetch("/data/speciality-data/speciality.json");return await s.json()}catch(s){console.error(s)}};displaySpecialities=s=>{const t=document.querySelector(".speciality__category");s.forEach((s=>{t&&t.insertAdjacentHTML("beforeend",`\n                    <div class="speciality__group speciality__line">\n                        <img src="${s.image}" alt="" class="speciality__img" width="20px" height="20px">\n                        <h3 class="speciality__title">${s.title}</h3>\n                        <p class="speciality__description">${s.description}</p>\n                    </div>\n                `)}))}}function scrollHeader(){const s=document.getElementById("header");this.scrollY>=50?s.classList.add("scroll-header"):s.classList.remove("scroll-header")}function setupSlides(){const s=[...document.querySelectorAll(".slide__container")],t=document.querySelector(".prev__slide"),e=document.querySelector(".next__slide");let n=0;t.addEventListener("click",(()=>{s[n].classList.remove("active-slide"),n=(n-1+s.length)%s.length,s[n].classList.add("active-slide")})),e.addEventListener("click",(()=>{s[n].classList.remove("active-slide"),n=(n+1)%s.length,s[n].classList.add("active-slide")}))}(async()=>{const s=new Specialities,t=await s.getGroups();s.displaySpecialities(t)})(),window.addEventListener("scroll",scrollHeader),setupSlides();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3BsYXlCbG9ncy5qcyIsImRpc3BsYXlMaW5rcy5qcyIsImRpc3BsYXlQcm9kdWN0cy5qcyIsImRpc3BsYXlTbGlkZXMuanMiLCJkaXNwbGF5U3BlY2lhbGl0aWVzLmpzIiwic2NyaXB0LmpzIl0sIm5hbWVzIjpbIkJsb2dzIiwiZ2V0QmxvZ3MiLCJhc3luYyIsInJlc3BvbnNlIiwiZmV0Y2giLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiZGlzcGxheUJsb2dzIiwiYmxvZ3MiLCJibG9nQ29udGVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZvckVhY2giLCJibG9nIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiaW1hZ2UiLCJidG5JY29uIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImNvbW1lbnRJY29uIiwiY29tbWVudE51bSIsInNob3dJY29uIiwic2hvd051bSIsImFwaUJsb2dzIiwiZG9tRWxlbWVudHMiLCJuYXZMaXN0IiwibmF2TWVudSIsIm1lbnVCdG4iLCJnZXRFbGVtZW50QnlJZCIsIm5hdkNsb3NlIiwiY2xvc2VOYXZNZW51IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiTmF2TGlua3MiLCJnZXRMaW5rcyIsImRpc3BsYXlOYXZMaW5rcyIsImxpbmtzIiwibGluayIsInRleHQiLCJvcGVuTW9iTWVudSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGQiLCJuYXZsaW5rcyIsIlByb2R1Y3RzIiwiZGlzcGxheVByb2R1Y3RzIiwicHJvbWlzZXMiLCJtYXAiLCJ1cmwiLCJkYXRhIiwiUHJvbWlzZSIsImFsbCIsImFtcGVkIiwibW9jaGFzIiwibGF0dGVzIiwidGhpcyIsImFtcGVkQ29udHJvbGxlciIsIm1vY2hhQ29udHJvbGxlciIsImxhdHRlQ29udHJvbGxlciIsInByb2R1Y3RUYWJzQ29udHJvbGxlciIsImxhdHRlV3JhcHBlciIsImxhdHRlIiwicHJpY2UiLCJuYW1lIiwiY2FydEljb24iLCJtb2NoYVdyYXBwZXIiLCJtb2NoYSIsImFtcGVkV3JhcHBlciIsIml0ZW0iLCJwcm9kdWN0c0xpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImNoYW5nZVByb2R1Y3RzIiwiZSIsImxpbmtUYXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwicHJvZHVjdCIsImRhdGFzZXQiLCJjb250ZW50IiwiVGVzdGltb25pYWxzIiwiZ2V0U2xpZGVzIiwiZGlzcGxheVNsaWRlcyIsInNsaWRlcyIsImNvbnRhaW5lciIsImNJZHgiLCJzbGlkZSIsInNJZHgiLCJpbm5lckhUTUwiLCJxdW90ZUljb24iLCJzdGFySWNvbiIsInRlc3RpbW9uaWFscyIsIlNwZWNpYWxpdGllcyIsImdldEdyb3VwcyIsImRpc3BsYXlTcGVjaWFsaXRpZXMiLCJncm91cHMiLCJjYXRlZ29yeSIsImdyb3VwIiwic2Nyb2xsSGVhZGVyIiwiaGVhZGVyIiwic2Nyb2xsWSIsInNldHVwU2xpZGVzIiwicHJldkJ0biIsIm5leHRCdG4iLCJpbmRleCIsImxlbmd0aCIsInNwZWNpYWxpdGllcyIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBQUEsYUFFQSxNQUFBQSxNQUNBQyxTQUFBQyxVQUNBLElBQ0EsTUFBQUMsUUFBQUMsTUFBQSw4QkFFQSxhQURBRCxFQUFBRSxNQUtBLENBRkEsTUFBQUMsR0FDQUMsUUFBQUQsTUFBQUEsRUFDQSxHQUdBRSxhQUFBQyxJQUNBLE1BQUFDLEVBQUFDLFNBQUFDLGNBQUEsa0JBQ0FILEVBQUFJLFNBQUFDLElBQ0FKLEdBQ0FBLEVBQUFLLG1CQUFBLFlBQUEsZ0pBR0FELEVBQUFFLDhJQUVBRixFQUFBRyxrT0FJQUgsRUFBQUksd0VBQ0FKLEVBQUFLLHdMQUdBTCxFQUFBTSx5R0FDQU4sRUFBQU8sMEtBR0FQLEVBQUFRLHdHQUNBUixFQUFBUyxnTEFNQSxHQUNBLEVBSUEsV0FDQSxNQUFBZCxFQUFBLElBQUFULE1BQ0F3QixRQUFBZixFQUFBUixXQUNBUSxFQUFBRCxhQUFBZ0IsRUFDQSxFQUpBLEdDN0NBLE1BQUFDLFlBQUEsS0FDQSxNQUFBQyxFQUFBZixTQUFBQyxj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QUFBLGdCQUNBeUYsRUFBQTFGLFNBQUFDLGNBQUEsZ0JBQ0EsSUFBQTBGLEVBQUEsRUFjQUYsRUFBQTNELGlCQUFBLFNBTkEsS0FDQXdDLEVBQUFxQixHQUFBdEUsVUFBQUMsT0FBQSxnQkFDQXFFLEdBQUFBLEVBQUEsRUFBQXJCLEVBQUFzQixRQUFBdEIsRUFBQXNCLE9BQ0F0QixFQUFBcUIsR0FBQXRFLFVBQUFVLElBQUEsZUFBQSxJQUlBMkQsRUFBQTVELGlCQUFBLFNBYkEsS0FDQXdDLEVBQUFxQixHQUFBdEUsVUFBQUMsT0FBQSxnQkFDQXFFLEdBQUFBLEVBQUEsR0FBQXJCLEVBQUFzQixPQUNBdEIsRUFBQXFCLEdBQUF0RSxVQUFBVSxJQUFBLGVBQUEsR0FXQSxDREhBLFdBQ0EsTUFBQThELEVBQUEsSUFBQWQsYUFDQUcsUUFBQVcsRUFBQWIsWUFDQWEsRUFBQVosb0JBQUFDLEVBQ0EsRUFKQSxHQ01BWSxPQUFBaEUsaUJBQUEsU0FBQXVELGNBQ0FHIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXHJcblxyXG5jbGFzcyBCbG9ncyB7XHJcbiAgICBnZXRCbG9ncyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiL2RhdGEvYmxvZy1kYXRhL2Jsb2dzLmpzb25cIilcclxuICAgICAgICAgICAgY29uc3QgYmxvZ3MgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgICAgICAgcmV0dXJuIGJsb2dzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGxheUJsb2dzID0gYmxvZ3MgPT4ge1xyXG4gICAgICAgIGNvbnN0IGJsb2dDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ibG9nX19jb250ZW50XCIpXHJcbiAgICAgICAgYmxvZ3MuZm9yRWFjaChibG9nID0+IHtcclxuICAgICAgICAgICAgaWYgKGJsb2dDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBibG9nQ29udGVudC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgYFxyXG4gICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPVwiYmxvZ19fY2FyZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmxvZ19faW1hZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtibG9nLmltYWdlfVwiIGFsdD1cIlwiIGNsYXNzPVwiYmxvZ19faW1nXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwiYmxvZ19fYnV0dG9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke2Jsb2cuYnRuSWNvbn1cIiBhbHQ9XCJhcnJvdyBpY29uXCIgd2lkdGg9XCIyMHB4XCIgaGVpZ2h0PVwiMjBweFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJsb2dfX2RhdGFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImJsb2dfX3RpdGxlXCI+JHtibG9nLnRpdGxlfTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImJsb2dfX2Rlc2NyaXB0aW9uXCI+JHtibG9nLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJibG9nX19mb290ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmxvZ19fcmVhY3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke2Jsb2cuY29tbWVudEljb259XCIgYWx0PVwiY29tZW50IGljb25cIiB3aWR0aD1cIjMwcHhcIiBoZWlnaHQ9XCIzMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiR7YmxvZy5jb21tZW50TnVtfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmxvZ19fcmVhY3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke2Jsb2cuc2hvd0ljb259XCIgYWx0PVwicmVhY3Rpb24gaWNvblwiIHdpZHRoPVwiMzBweFwiIGhlaWdodD1cIjMwcHhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtibG9nLnNob3dOdW19Szwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+XHJcbiAgICAgICAgICAgICAgICBgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufTtcclxuXHJcbihhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBibG9ncyA9IG5ldyBCbG9ncygpXHJcbiAgICBjb25zdCBhcGlCbG9ncyA9IGF3YWl0IGJsb2dzLmdldEJsb2dzKClcclxuICAgIGJsb2dzLmRpc3BsYXlCbG9ncyhhcGlCbG9ncylcclxufSkoKTsiLCJcInVzZSBzdHJpY3RcIlxyXG5cclxuY29uc3QgZG9tRWxlbWVudHMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBuYXZMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZfX2xpc3RcIilcclxuICAgIGNvbnN0IG5hdk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdl9fbWVudVwiKVxyXG4gICAgY29uc3QgbWVudUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudS1idG5cIilcclxuICAgIGNvbnN0IG5hdkNsb3NlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYXYtY2xvc2VcIilcclxuICAgIGNvbnN0IGNsb3NlTmF2TWVudSA9ICgpID0+IHtcclxuICAgICAgICBpZihuYXZNZW51KSBuYXZNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93LW1lbnVcIilcclxuICAgIH1cclxuICAgIHJldHVybiB7IG5hdkxpc3QsIG5hdk1lbnUsIGNsb3NlTmF2TWVudSwgbWVudUJ0biwgbmF2Q2xvc2UgfVxyXG59O1xyXG5cclxubGV0IHtuYXZMaXN0LCBuYXZNZW51LCBjbG9zZU5hdk1lbnUsIG1lbnVCdG4sIG5hdkNsb3NlfSA9IGRvbUVsZW1lbnRzKClcclxuXHJcbmNsYXNzIE5hdkxpbmtzIHtcclxuICAgICBnZXRMaW5rcyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiL2RhdGEvbmF2LWRhdGEvbmF2bGlua3MuanNvblwiKVxyXG4gICAgICAgICAgICBjb25zdCBsaW5rcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICAgICAgICByZXR1cm4gbGlua3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5TmF2TGlua3MgPSBsaW5rcyA9PiB7XHJcbiAgICAgICAgbGlua3MuZm9yRWFjaChsaW5rID0+IHtcclxuICAgICAgICAgICAgaWYgKG5hdkxpc3QpIHtcclxuICAgICAgICAgICAgICAgIG5hdkxpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIGBcclxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdl9faXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIke2xpbmsubGlua31cIiBjbGFzcz1cIm5hdl9fbGluayBhY3RpdmUtbGlua1wiIG9uY2xpY2s9XCJjbG9zZU5hdk1lbnUoKVwiPiR7bGluay50ZXh0fTwvYT5cclxuICAgICAgICAgICAgICAgIDwvbGk+YClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgb3Blbk1vYk1lbnUgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lbnVCdG4pIG1lbnVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IG5hdk1lbnUuY2xhc3NMaXN0LmFkZChcInNob3ctbWVudVwiKSlcclxuICAgIFxyXG4gICAgICAgIGlmIChuYXZDbG9zZSkgbmF2Q2xvc2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IG5hdk1lbnUuY2xhc3NMaXN0LnJlbW92ZShcInNob3ctbWVudVwiKSlcclxuICAgIH07XHJcbn07XHJcblxyXG4oYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbmF2bGlua3MgPSBuZXcgTmF2TGlua3MoKVxyXG4gICAgY29uc3QgbGlua3MgPSBhd2FpdCBuYXZsaW5rcy5nZXRMaW5rcygpXHJcbiAgICBuYXZsaW5rcy5kaXNwbGF5TmF2TGlua3MobGlua3MpXHJcbiAgICBuYXZsaW5rcy5vcGVuTW9iTWVudSgpXHJcbn0pKCk7XHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmNsYXNzIFByb2R1Y3RzIHtcclxuICAgIGRpc3BsYXlQcm9kdWN0cyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmxzID0gW1xyXG4gICAgICAgICAgICBcIi9kYXRhL3Byb2R1Y3RzLWRhdGEvYW1wZWQuanNvblwiLFxyXG4gICAgICAgICAgICBcIi9kYXRhL3Byb2R1Y3RzLWRhdGEvbW9jaGFzLmpzb25cIixcclxuICAgICAgICAgICAgXCIvZGF0YS9wcm9kdWN0cy1kYXRhL2xhdHRlcy5qc29uXCJcclxuICAgICAgICBdO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB1cmxzLm1hcChhc3luYyB1cmwgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgfSlcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcclxuICAgIFxyXG4gICAgICAgIGxldCBhbXBlZCwgbW9jaGFzLCBsYXR0ZXM7XHJcbiAgICAgICAgYW1wZWQgPSBkYXRhWzBdO1xyXG4gICAgICAgIG1vY2hhcyA9IGRhdGFbMV07XHJcbiAgICAgICAgbGF0dGVzID0gZGF0YVsyXTtcclxuICAgIFxyXG4gICAgICAgIHRoaXMuYW1wZWRDb250cm9sbGVyKGFtcGVkKTtcclxuXHJcbiAgICAgICAgdGhpcy5tb2NoYUNvbnRyb2xsZXIobW9jaGFzKTtcclxuXHJcbiAgICAgICAgdGhpcy5sYXR0ZUNvbnRyb2xsZXIobGF0dGVzKTtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9kdWN0VGFic0NvbnRyb2xsZXIoKVxyXG4gICAgfVxyXG5cclxuICAgIGxhdHRlQ29udHJvbGxlcihsYXR0ZXMpIHtcclxuICAgICAgICBjb25zdCBsYXR0ZVdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xhdHRlcyAucHJvZHVjdHNfX3dyYXBwZXJcIik7XHJcbiAgICAgICAgbGF0dGVzLmZvckVhY2gobGF0dGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAobGF0dGVXcmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICBsYXR0ZVdyYXBwZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIGBcclxuICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cInByb2R1Y3RzX19jYXJkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0c19fc2hhcGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtsYXR0ZS5pbWFnZX1cIiBhbHQ9XCJjYWtlIHByb2R1Y3RcIiBjbGFzcz1cInByb2R1Y3RzX19pbWdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0c19fZGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcm9kdWN0c19fcHJpY2VcIj4ke2xhdHRlLnByaWNlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHJvZHVjdHNfX25hbWVcIj4ke2xhdHRlLm5hbWV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBwcm9kdWN0c19fYnV0dG9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke2xhdHRlLmNhcnRJY29ufVwiIGFsdD1cInNob3BwaW5nIGNhcnRcIiB3aWR0aD1cIjMwcHhcIiBoZWlnaHQ9XCIzMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPlxyXG4gICAgICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBtb2NoYUNvbnRyb2xsZXIobW9jaGFzKSB7XHJcbiAgICAgICAgY29uc3QgbW9jaGFXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2NoYXMgLnByb2R1Y3RzX193cmFwcGVyXCIpO1xyXG4gICAgICAgIG1vY2hhcy5mb3JFYWNoKG1vY2hhID0+IHtcclxuICAgICAgICAgICAgaWYgKG1vY2hhV3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgbW9jaGFXcmFwcGVyLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCBgXHJcbiAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9XCJwcm9kdWN0c19fY2FyZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHNfX3NoYXBlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7bW9jaGEuaW1hZ2V9XCIgYWx0PVwiY2FrZSBwcm9kdWN0XCIgY2xhc3M9XCJwcm9kdWN0c19faW1nXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHNfX2RhdGFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHJvZHVjdHNfX3ByaWNlXCI+JHttb2NoYS5wcmljZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb2R1Y3RzX19uYW1lXCI+JHttb2NoYS5uYW1lfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidXR0b24gcHJvZHVjdHNfX2J1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHttb2NoYS5jYXJ0SWNvbn1cIiBhbHQ9XCJzaG9wcGluZyBjYXJ0XCIgd2lkdGg9XCIzMHB4XCIgaGVpZ2h0PVwiMzBweFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT5cclxuICAgICAgICAgICAgICAgIGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYW1wZWRDb250cm9sbGVyKGFtcGVkKSB7XHJcbiAgICAgICAgY29uc3QgYW1wZWRXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhbXBlZCAucHJvZHVjdHNfX3dyYXBwZXJcIik7XHJcbiAgICAgICAgYW1wZWQuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKGFtcGVkV3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgYW1wZWRXcmFwcGVyLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCBgXHJcbiAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9XCJwcm9kdWN0c19fY2FyZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHNfX3NoYXBlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7aXRlbS5pbWFnZX1cIiBhbHQ9XCJjYWtlIHByb2R1Y3RcIiBjbGFzcz1cInByb2R1Y3RzX19pbWdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0c19fZGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcm9kdWN0c19fcHJpY2VcIj4ke2l0ZW0ucHJpY2V9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcm9kdWN0c19fbmFtZVwiPiR7aXRlbS5uYW1lfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidXR0b24gcHJvZHVjdHNfX2J1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtpdGVtLmNhcnRJY29ufVwiIGFsdD1cInNob3BwaW5nIGNhcnRcIiB3aWR0aD1cIjMwcHhcIiBoZWlnaHQ9XCIzMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPlxyXG4gICAgICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9kdWN0VGFic0NvbnRyb2xsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcHJvZHVjdHNMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJvZHVjdHNfX2l0ZW1cIilcclxuICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGNoYW5nZVByb2R1Y3RzKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgbGlua1RhcmdldCA9IGUuY3VycmVudFRhcmdldDtcclxuICAgICAgICAgICAgY29uc3QgcHJvZHVjdCA9IGxpbmtUYXJnZXQuZGF0YXNldC5wcm9kdWN0O1xyXG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0c0NvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcm9kdWN0c19fY29udGVudFwiKVxyXG4gICAgXHJcbiAgICAgICAgICAgIHByb2R1Y3RzQ29udGVudHMuZm9yRWFjaChjb250ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1jb250ZW50XCIpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHByb2R1Y3RzTGlua3MuZm9yRWFjaChsaW5rID0+IHtcclxuICAgICAgICAgICAgICAgIGxpbmsuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1saW5rXCIpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICBcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7cHJvZHVjdH1gKS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlLWNvbnRlbnRcIilcclxuICAgICAgICAgICAgbGlua1RhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlLWxpbmtcIilcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBwcm9kdWN0c0xpbmtzLmZvckVhY2gobGluayA9PiB7XHJcbiAgICAgICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNoYW5nZVByb2R1Y3RzKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHByb2R1Y3RzID0gbmV3IFByb2R1Y3RzKClcclxuICAgIHByb2R1Y3RzLmRpc3BsYXlQcm9kdWN0cygpXHJcbn0pKCk7IiwiXCJ1c2Ugc3RyaWN0XCJcclxuXHJcbmNsYXNzIFRlc3RpbW9uaWFscyB7XHJcbiAgICBnZXRTbGlkZXMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcIi9kYXRhL3NsaWRlci1kYXRhL3NsaWRlci1kYXRhLmpzb25cIilcclxuICAgICAgICAgICAgY29uc3Qgc2xpZGVzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXlTbGlkZXMgPSBzbGlkZXMgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWRlX19jb250YWluZXJcIilcclxuICAgICAgICBjb250YWluZXJzLmZvckVhY2goKGNvbnRhaW5lciwgY0lkeCkgPT4ge1xyXG4gICAgICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNJZHgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjSWR4ID09PSBzSWR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke3NsaWRlLnF1b3RlSWNvbn1cIiBhbHQ9XCJcIiBjbGFzcz1cInNsaWRlX19xdW90ZVwiIHdpZHRoPVwiMzBweFwiIGhlaWdodD1cIjMwcHhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtzbGlkZS5pbWFnZX1cIiBhbHQ9XCJcIiBjbGFzcz1cInVzZXJfX2ltZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXJfX2luZm9cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+JHtzbGlkZS5uYW1lfTwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXJfX3N0YXJzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtzbGlkZS5zdGFySWNvbn1cIiBhbHQ9XCJcIiBjbGFzcz1cInN0YXJcIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtzbGlkZS5zdGFySWNvbn1cIiBhbHQ9XCJcIiBjbGFzcz1cInN0YXJcIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtzbGlkZS5zdGFySWNvbn1cIiBhbHQ9XCJcIiBjbGFzcz1cInN0YXJcIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtzbGlkZS5zdGFySWNvbn1cIiBhbHQ9XCJcIiBjbGFzcz1cInN0YXJcIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtzbGlkZS5zdGFySWNvbn1cIiBhbHQ9XCJcIiBjbGFzcz1cInN0YXJcIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidXNlcl9fZGVzY3JpcHRpb25cIj4ke3NsaWRlLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gYFxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH07XHJcbn07XHJcblxyXG4oYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgdGVzdGltb25pYWxzID0gbmV3IFRlc3RpbW9uaWFscygpXHJcbiAgICBjb25zdCBzbGlkZXMgPSBhd2FpdCB0ZXN0aW1vbmlhbHMuZ2V0U2xpZGVzKClcclxuICAgIHRlc3RpbW9uaWFscy5kaXNwbGF5U2xpZGVzKHNsaWRlcylcclxufSkoKTsiLCJcInVzZSBzdHJpY3RcIlxyXG5cclxuY2xhc3MgU3BlY2lhbGl0aWVzIHtcclxuICAgIGdldEdyb3VwcyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiL2RhdGEvc3BlY2lhbGl0eS1kYXRhL3NwZWNpYWxpdHkuanNvblwiKVxyXG4gICAgICAgICAgICBjb25zdCBncm91cHMgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgICAgICAgcmV0dXJuIGdyb3VwcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXlTcGVjaWFsaXRpZXMgPSBncm91cHMgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zcGVjaWFsaXR5X19jYXRlZ29yeVwiKVxyXG4gICAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICAgICAgaWYgKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yeS5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgYFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGVjaWFsaXR5X19ncm91cCBzcGVjaWFsaXR5X19saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtncm91cC5pbWFnZX1cIiBhbHQ9XCJcIiBjbGFzcz1cInNwZWNpYWxpdHlfX2ltZ1wiIHdpZHRoPVwiMjBweFwiIGhlaWdodD1cIjIwcHhcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwic3BlY2lhbGl0eV9fdGl0bGVcIj4ke2dyb3VwLnRpdGxlfTwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic3BlY2lhbGl0eV9fZGVzY3JpcHRpb25cIj4ke2dyb3VwLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIGApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59O1xyXG5cclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHNwZWNpYWxpdGllcyA9IG5ldyBTcGVjaWFsaXRpZXMoKVxyXG4gICAgY29uc3QgZ3JvdXBzID0gYXdhaXQgc3BlY2lhbGl0aWVzLmdldEdyb3VwcygpXHJcbiAgICBzcGVjaWFsaXRpZXMuZGlzcGxheVNwZWNpYWxpdGllcyhncm91cHMpXHJcbn0pKCk7IiwiXCJ1c2Ugc3RyaWN0XCJcclxuXHJcbmZ1bmN0aW9uIHNjcm9sbEhlYWRlcigpIHtcclxuICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVhZGVyXCIpXHJcblxyXG4gICAgaWYgKHRoaXMuc2Nyb2xsWSA+PSA1MCkge1xyXG4gICAgICAgIGhlYWRlci5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsLWhlYWRlclwiKVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJzY3JvbGwtaGVhZGVyXCIpXHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBzZXR1cFNsaWRlcygpIHtcclxuICAgIGNvbnN0IHNsaWRlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWRlX19jb250YWluZXJcIildXHJcbiAgICBjb25zdCBwcmV2QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcmV2X19zbGlkZVwiKVxyXG4gICAgY29uc3QgbmV4dEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV4dF9fc2xpZGVcIilcclxuICAgIGxldCBpbmRleCA9IDBcclxuXHJcbiAgICBjb25zdCBuZXh0U2xpZGUgPSAoKSA9PiB7XHJcbiAgICAgICAgc2xpZGVzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlLXNsaWRlXCIpXHJcbiAgICAgICAgaW5kZXggPSAoaW5kZXggKyAxKSAlIHNsaWRlcy5sZW5ndGhcclxuICAgICAgICBzbGlkZXNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtc2xpZGVcIilcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwcmV2U2xpZGUgPSAoKSA9PiB7XHJcbiAgICAgICAgc2xpZGVzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlLXNsaWRlXCIpXHJcbiAgICAgICAgaW5kZXggPSAoaW5kZXggLSAxICsgc2xpZGVzLmxlbmd0aCkgJSBzbGlkZXMubGVuZ3RoXHJcbiAgICAgICAgc2xpZGVzW2luZGV4XS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlLXNsaWRlXCIpXHJcbiAgICB9XHJcblxyXG4gICAgcHJldkJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcHJldlNsaWRlKVxyXG4gICAgbmV4dEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbmV4dFNsaWRlKVxyXG59O1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHNjcm9sbEhlYWRlcik7XHJcbiAgICBzZXR1cFNsaWRlcygpXHJcbn0pKClcclxuXHJcbiJdfQ==
