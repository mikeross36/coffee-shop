"use strict";class Blogs{getBlogs=async()=>{try{const t=await fetch("/data/blog-data/blogs.json");return await t.json()}catch(t){console.error(t)}};displayBlogs=t=>{const e=document.querySelector(".blog__content");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <article class="blog__card">\n                        <div class="blog__image">\n                            <img src="${t.image}" alt="" class="blog__img">\n                            <a href="#" class="blog__button">\n                                <img src="${t.btnIcon}" alt="arrow icon" width="20px" height="20px">\n                            </a>\n                        </div>\n                        <div class="blog__data">\n                            <h4 class="blog__title">${t.title}</h4>\n                            <p class="blog__description">${t.description}</p>\n                            <div class="blog__footer">\n                                <div class="blog__reaction">\n                                    <img src="${t.commentIcon}" alt="coment icon" width="30px" height="30px">\n                                    <span>${t.commentNum}</span>\n                                </div>\n                                <div class="blog__reaction">\n                                    <img src="${t.showIcon}" alt="reaction icon" width="30px" height="30px">\n                                    <span>${t.showNum}K</span>\n                                </div>\n                            </div>\n                        </div>\n                    </article>\n                `)}))}}(async()=>{const t=new Blogs,e=await t.getBlogs();t.displayBlogs(e)})();const domElements=()=>{const t=document.querySelector(".nav__list"),e=document.querySelector(".nav__menu"),s=document.getElementById("menu-btn"),n=document.getElementById("nav-close");return{navList:t,navMenu:e,closeNavMenu:()=>{e&&e.classList.remove("show-menu")},menuBtn:s,navClose:n}};let{navList:navList,navMenu:navMenu,closeNavMenu:closeNavMenu,menuBtn:menuBtn,navClose:navClose}=domElements();class NavLinks{getLinks=async()=>{try{const t=await fetch("/data/nav-data/navlinks.json");return await t.json()}catch(t){console.error(t)}};displayNavLinks=t=>{t.forEach((t=>{navList&&navList.insertAdjacentHTML("beforeend",`\n                <li class="nav__item">\n                    <a href="${t.link}" class="nav__link active-link" onclick="closeNavMenu()">${t.text}</a>\n                </li>`)}))};openMobMenu=()=>{menuBtn&&menuBtn.addEventListener("click",(()=>navMenu.classList.add("show-menu"))),navClose&&navClose.addEventListener("click",(()=>navMenu.classList.remove("show-menu")))}}(async()=>{const t=new NavLinks,e=await t.getLinks();t.displayNavLinks(e),t.openMobMenu()})();class Products{displayProducts=async()=>{const t=["/data/products-data/amped.json","/data/products-data/mochas.json","/data/products-data/lattes.json"].map((async t=>{const e=await fetch(t);return await e.json()})),e=await Promise.all(t);let s,n,a;s=e[0],n=e[1],a=e[2],this.ampedController(s),this.mochaController(n),this.latteController(a),this.productTabsController()};latteController(t){const e=document.querySelector("#lattes .products__wrapper");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${t.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${t.price}</span>\n                            <span class="products__name">${t.name}</span>\n                            <button class="button products__button">\n                                <img src="${t.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}mochaController(t){const e=document.querySelector("#mochas .products__wrapper");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${t.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${t.price}</span>\n                            <span class="products__name">${t.name}</span>\n                            <button class="button products__button">\n                                <img src="${t.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}ampedController(t){const e=document.querySelector("#amped .products__wrapper");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${t.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${t.price}</span>\n                            <span class="products__name">${t.name}</span>\n                            <button class="button products__button">\n                                <img src="${t.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}productTabsController=()=>{const t=document.querySelectorAll(".products__item");function e(e){const s=e.currentTarget,n=s.dataset.product;document.querySelectorAll(".products__content").forEach((t=>{t.classList.remove("active-content")})),t.forEach((t=>{t.classList.remove("active-link")})),document.querySelector(`#${n}`).classList.add("active-content"),s.classList.add("active-link")}t.forEach((t=>{t.addEventListener("click",e)}))}}(async()=>{(new Products).displayProducts()})();const globals=()=>({containers:[...document.querySelectorAll(".slide__container")],prevBtn:document.querySelector(".prev__slide"),nextBtn:document.querySelector(".next__slide"),currSlide:0});let{containers:containers,prevBtn:prevBtn,nextBtn:nextBtn,currSlide:currSlide}={containers:[...document.querySelectorAll(".slide__container")],prevBtn:document.querySelector(".prev__slide"),nextBtn:document.querySelector(".next__slide"),currSlide:0};class Testimonials{getSlides=async()=>{try{const t=await fetch("/data/slider-data/slider-data.json");return await t.json()}catch(t){console.error(t)}};displaySlides=t=>{containers&&containers.forEach(((e,s)=>{t.forEach(((t,n)=>{s===n&&(e.innerHTML=`\n                        <div class="slide">\n                            <img src="${t.quoteIcon}" alt="" class="slide__quote" width="30px" height="30px">\n                            <div class="user">\n                                <img src="${t.image}" alt="" class="user__img">\n                                <div class="user__info">\n                                    <h3>${t.name}</h3>\n                                    <div class="user__stars">\n                                        <img src="${t.starIcon}" alt="" class="star" width="20px" height="20px">\n                                        <img src="${t.starIcon}" alt="" class="star" width="20px" height="20px">\n                                        <img src="${t.starIcon}" alt="" class="star" width="20px" height="20px">\n                                        <img src="${t.starIcon}" alt="" class="star" width="20px" height="20px">\n                                        <img src="${t.starIcon}" alt="" class="star" width="20px" height="20px">\n                                    </div>\n                                </div>\n                            </div>\n                            <p class="user__description">${t.description}</p>\n                        </div> `)}))}))};removeActive=(t,e)=>{t[e].classList.remove("active-slide")};addActive=(t,e)=>{t[e].classList.add("active-slide")};setupSlides=()=>{nextBtn&&(nextBtn.onclick=()=>{this.removeActive(containers,currSlide),currSlide=(currSlide+1)%containers.length,this.addActive(containers,currSlide)}),prevBtn&&(prevBtn.onclick=()=>{this.removeActive(containers,currSlide),currSlide=(currSlide-1+containers.length)%containers.length,this.addActive(containers,currSlide)})}}(async()=>{const t=new Testimonials,e=await t.getSlides();t.displaySlides(e),t.setupSlides()})();class Specialities{getGroups=async()=>{try{const t=await fetch("/data/speciality-data/speciality.json");return await t.json()}catch(t){console.error(t)}};displaySpecialities=t=>{const e=document.querySelector(".speciality__category");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <div class="speciality__group speciality__line">\n                        <img src="${t.image}" alt="" class="speciality__img" width="20px" height="20px">\n                        <h3 class="speciality__title">${t.title}</h3>\n                        <p class="speciality__description">${t.description}</p>\n                    </div>\n                `)}))}}function scrollHeader(){const t=document.getElementById("header");this.scrollY>=50?t.classList.add("scroll-header"):t.classList.remove("scroll-header")}(async()=>{const t=new Specialities,e=await t.getGroups();t.displaySpecialities(e)})(),window.addEventListener("scroll",scrollHeader);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
