"use strict";const domElements=()=>{const t=document.querySelector(".nav__list"),e=document.querySelector(".nav__menu"),s=document.getElementById("menu-btn"),n=document.getElementById("nav-close");return{navList:t,navMenu:e,closeNavMenu:()=>{e&&e.classList.remove("show-menu")},menuBtn:s,navClose:n}};let{navList:navList,navMenu:navMenu,closeNavMenu:closeNavMenu,menuBtn:menuBtn,navClose:navClose}=domElements();class NavLinks{getLinks=async()=>{try{const t=await fetch("/data/nav-data/navlinks.json");return await t.json()}catch(t){console.error(t)}};displayNavLinks=t=>{t.forEach((t=>{navList&&navList.insertAdjacentHTML("beforeend",`\n                <li class="nav__item">\n                    <a href="${t.link}" class="nav__link active-link" onclick="closeNavMenu()">${t.text}</a>\n                </li>`)}))};openMobMenu=()=>{menuBtn&&menuBtn.addEventListener("click",(()=>navMenu.classList.add("show-menu"))),navClose&&navClose.addEventListener("click",(()=>navMenu.classList.remove("show-menu")))}}(async()=>{const t=new NavLinks,e=await t.getLinks();t.displayNavLinks(e),t.openMobMenu()})();class Products{displayProducts=async()=>{const t=["/data/products-data/amped.json","/data/products-data/mochas.json","/data/products-data/lattes.json"].map((async t=>{const e=await fetch(t);return await e.json()})),e=await Promise.all(t);let s,n,a;s=e[0],n=e[1],a=e[2],this.ampedController(s),this.mochaController(n),this.latteController(a),this.productTabsController()};latteController(t){const e=document.querySelector("#lattes .products__wrapper");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${t.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${t.price}</span>\n                            <span class="products__name">${t.name}</span>\n                            <button class="button products__button">\n                                <img src="${t.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}mochaController(t){const e=document.querySelector("#mochas .products__wrapper");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${t.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${t.price}</span>\n                            <span class="products__name">${t.name}</span>\n                            <button class="button products__button">\n                                <img src="${t.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}ampedController(t){const e=document.querySelector("#amped .products__wrapper");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <article class="products__card">\n                        <div class="products__shape">\n                            <img src="${t.image}" alt="cake product" class="products__img">\n                        </div>\n                        <div class="products__data">\n                            <span class="products__price">${t.price}</span>\n                            <span class="products__name">${t.name}</span>\n                            <button class="button products__button">\n                                <img src="${t.cartIcon}" alt="shopping cart" width="30px" height="30px">\n                            </button>\n                        </div>\n                    </article>\n                `)}))}productTabsController=()=>{const t=document.querySelectorAll(".products__item");function e(e){const s=e.currentTarget,n=s.dataset.product;document.querySelectorAll(".products__content").forEach((t=>{t.classList.remove("active-content")})),t.forEach((t=>{t.classList.remove("active-link")})),document.querySelector(`#${n}`).classList.add("active-content"),s.classList.add("active-link")}t.forEach((t=>{t.addEventListener("click",e)}))}}(async()=>{(new Products).displayProducts()})();class Specialities{getGroups=async()=>{try{const t=await fetch("/data/speciality-data/speciality.json");return await t.json()}catch(t){console.error(t)}};displaySpecialities=t=>{const e=document.querySelector(".speciality__category");t.forEach((t=>{e&&e.insertAdjacentHTML("beforeend",`\n                    <div class="speciality__group speciality__line">\n                        <img src="${t.image}" alt="" class="speciality__img" width="20px" height="20px">\n                        <h3 class="speciality__title">${t.title}</h3>\n                        <p class="speciality__description">${t.description}</p>\n                    </div>\n                `)}))}}function scrollHeader(){const t=document.getElementById("header");this.scrollY>=50?t.classList.add("scroll-header"):t.classList.remove("scroll-header")}function setupSlides(){const t=[...document.querySelectorAll(".slide__container")],e=document.querySelector(".prev__slide"),s=document.querySelector(".next__slide");let n=0;e.addEventListener("click",(()=>{t[n].classList.remove("active-slide"),n=(n-1+t.length)%t.length,t[n].classList.add("active-slide")})),s.addEventListener("click",(()=>{t[n].classList.remove("active-slide"),n=(n+1)%t.length,t[n].classList.add("active-slide")}))}(async()=>{const t=new Specialities,e=await t.getGroups();t.displaySpecialities(e)})(),window.addEventListener("scroll",scrollHeader),setupSlides();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
